package com.fantasyhospital.salles;

import java.util.Random;
import java.util.concurrent.CopyOnWriteArrayList;

import com.fantasyhospital.model.creatures.abstractclass.Creature;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

/**
 * Repr√©sente une salle g√©n√©rique dans l'h√¥pital Fantasy Hospital.
 * Une salle contient un ensemble de cr√©atures et poss√®de un nom, une superficie et une capacit√© maximale.
 * Elle offre des m√©thodes pour ajouter, retirer et rechercher des cr√©atures.
 */
@Getter
@Slf4j
public class Salle {

    /**
     * Nom de la salle
     */
    @Setter
    protected String nom;

    /**
     * Superficie de la salle en m¬≤
     */
    @Setter
    protected double superficie;

    /**
     * Nombre maximal de cr√©atures pouvant √™tre accueillies
     */
    protected final int NB_MAX_CREATURE;

    /**
     * Liste des cr√©atures pr√©sentes dans la salle (thread-safe)
     */
    @Setter
    @Getter
    protected CopyOnWriteArrayList<Creature> creatures = new CopyOnWriteArrayList<>();

    /**
     * Cr√©e une nouvelle salle.
     *
     * @param nom nom de la salle
     * @param superficie superficie en m¬≤
     * @param NB_MAX_CREATURE capacit√© maximale
     */
    public Salle(String nom, double superficie, int NB_MAX_CREATURE) {
        this.nom = nom;
        this.superficie = superficie;
        this.NB_MAX_CREATURE = NB_MAX_CREATURE;
    }

    /**
     * Ajoute une cr√©ature √† la salle si la capacit√© n'est pas atteinte.
     *
     * @param creature la cr√©ature √† ajouter
     * @return true si ajout√©e, false sinon
     */
    public boolean ajouterCreature(Creature creature) {
        if (creatures.size() >= NB_MAX_CREATURE) {
            return false;
        } else {
            creatures.add(creature);
            return true;
        }
    }

    /**
     * Retire une cr√©ature de la salle.
     *
     * @param creature la cr√©ature √† retirer
     * @return true si retir√©e, false sinon
     */
    public boolean enleverCreature(Creature creature) {
        return this.creatures.remove(creature);
    }

    /**
     * Affiche les informations de la salle dans les logs.
     */
    public void afficherInfosService() {
        log.info("\n{}", this);
    }

    /**
     * Affiche les informations des cr√©atures (√† compl√©ter).
     */
    public void afficherInfosCreatures() {

    }

    /**
     * Retourne la premi√®re cr√©ature de la salle.
     */
    public Creature getFirstCreature() {
        return creatures.iterator().next();
    }

    /**
     * Retourne la derni√®re cr√©ature de la salle.
     */
    public Creature getLastCreature() {
        return (Creature) creatures.toArray()[creatures.size() - 1];
    }

    /**
     * Recherche une cr√©ature par son nom complet.
     *
     * @param creatureName nom complet de la cr√©ature
     * @return la cr√©ature trouv√©e ou null
     */
    public Creature getCreatureByName(String creatureName) {
        for (Creature creature : creatures) {
            if (creature.getNomComplet().equals(creatureName)) {
                return creature;
            }
        }
        return null;
    }

    /**
     * Retourne une cr√©ature al√©atoire parmi celles pr√©sentes dans la salle.
     */
    public Creature getRandomCreature() {
        Random random = new Random();
        return (Creature) this.creatures.toArray()[random.nextInt(this.creatures.size())];
    }

    /**
     * Retourne une repr√©sentation textuelle de la salle et de ses cr√©atures.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("\n--- Salle : ").append(nom).append(" ---\n");
        sb.append("Superficie : ").append(superficie).append(" m¬≤\n");
        sb.append("Nombre de cr√©atures maximale : ").append(NB_MAX_CREATURE).append("\n");

        sb.append("\nüè• Salle :\n");
        if (creatures.isEmpty()) {
            sb.append("  Aucune cr√©ature dans ce service.\n");
        } else {
            for (Creature c : creatures) {
                sb.append("  - ").append(c).append("\n");
            }
        }

        return sb.toString();
    }
}
