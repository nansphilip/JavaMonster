package com.fantasyhospital.salles.servicemedical;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.fantasyhospital.model.creatures.Medecin;
import com.fantasyhospital.model.creatures.abstractclass.Creature;
import com.fantasyhospital.salles.Salle;

import lombok.Getter;
import lombok.Setter;

/**
 * Repr√©sente un service m√©dical sp√©cialis√© dans l'h√¥pital Fantasy Hospital.
 * H√©rite de Salle et ajoute la gestion des m√©decins et du budget.
 */
@Setter
@Getter
public class ServiceMedical extends Salle {

    /**
     * Liste des m√©decins affect√©s √† ce service
     */
    protected List<Medecin> medecins = new ArrayList<>();

    /**
     * Budget du service (ex: inexistant, m√©diocre, insuffisant, faible)
     */
    protected String budget;

    /**
     * Cr√©e un service m√©dical avec nom, superficie, capacit√© et budget.
     */
    public ServiceMedical(String nom, double superficie, int NB_MAX_CREATURE, String budget) {
        super(nom, superficie, NB_MAX_CREATURE);
        this.budget = budget;
    }

    /**
     * Ajoute une cr√©ature au service m√©dical si la capacit√© et la race sont
     * compatibles.
     */
    @Override
    public boolean ajouterCreature(Creature creature) {
        if (creatures.size() >= NB_MAX_CREATURE) {
            return false;
        }
        if (creatures.isEmpty()) {
            creatures.add(creature);
            return true;
        }
        Iterator<Creature> iterator = creatures.iterator();
        String raceAutorisee = iterator.next().getRace();
        if (creature.getRace().equals(raceAutorisee)) {
            creatures.add(creature);
            return true;
        }
        return false;
    }

    /**
     * Ajoute un m√©decin √† la liste des m√©decins du service.
     */
    public void ajouterMedecin(Medecin medecin) {
        this.medecins.add(medecin);
        medecin.setServiceMedical(this);
    }

    /**
     * Retire un m√©decin du service.
     */
    public void retirerMedecin(Medecin medecin) {
        this.medecins.remove(medecin);
        medecin.setServiceMedical(null);
    }

    /**
     * Soigne une cr√©ature par un m√©decin (√† compl√©ter).
     */
    public void soignerCreatures(Medecin medecin, Creature creature) {

    }

    /**
     * R√©vise le budget du service (√† compl√©ter).
     */
    public void reviserBudget(int valeur) {

    }

    /**
     * Retourne une repr√©sentation textuelle du service m√©dical, de ses m√©decins
     * et de ses cr√©atures.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("\n--- Service : ").append(nom).append(" ---\n");
        sb.append("Superficie : ").append(superficie).append(" m¬≤\n");
        sb.append("Nombre de cr√©atures maximale : ").append(NB_MAX_CREATURE).append("\n");
        sb.append("Budget : ").append(budget).append("\n");

        sb.append("\nüßç M√©decins :\n");
        if (medecins.isEmpty()) {
            sb.append("  Aucun m√©decin dans ce service.\n");
        } else {
            for (Medecin m : medecins) {
                sb.append("  - ").append(m.toString()).append("\n");
            }
        }

        sb.append("\nüëæ Cr√©atures :\n");
        if (creatures.isEmpty()) {
            sb.append("  Aucune cr√©ature dans ce service.\n");
        } else {
            for (Creature c : creatures) {
                sb.append("  - ").append(c).append("\n");
            }
        }

        return sb.toString();
    }
}
